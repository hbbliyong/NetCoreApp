<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NetCoreApp</name>
    </assembly>
    <members>
        <member name="M:NetCoreApp.Controllers.ValuesController.Get">
            <summary>
            获取用户信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetCoreApp.Controllers.ValuesController.PostData(System.String,NetCoreApp.Model.UserInfo)">
            <summary>
            接收Userinfo实体
            </summary>
            <param name="id">id</param>
            <param name="value">用户信息</param>
            <returns></returns>
        </member>
        <member name="T:NetCoreApp.Db.BaseDbContext">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetCoreApp.Extensions.CollectionExtension.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
                添加集合到现有集合中
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:NetCoreApp.Extensions.CollectionExtension.Each``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
                Each 迭代操作
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:NetCoreApp.Extensions.CollectionExtension.ConvertToDictionary``2(System.Collections.Generic.ICollection{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
                将集合转换到 Dictionary
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="source"></param>
            <param name="name">做为键值对 name 的属性。</param>
            <param name="value">做为键值对 value 的属性。</param>
            <returns></returns>
        </member>
        <member name="M:NetCoreApp.Extensions.CollectionExtension.ConvertToNameValueCollection``2(System.Collections.Generic.ICollection{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
                取集合的键值对集合
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="source"></param>
            <param name="name">做为键值对 name 的属性。</param>
            <param name="value">做为键值对 value 的属性。</param>
            <returns></returns>
        </member>
        <member name="T:NetCoreApp.Extensions.ExpressionExtensions">
            <summary>
            表达式树常用扩展方法
            源自：https://gitee.com/yubaolee/OpenAuth.Net/blob/bestflow/Infrastructure/DynamicLinq.cs
            </summary>
        </member>
        <!-- 对于成员“M:NetCoreApp.Extensions.ExpressionExtensions.GetPropertyName``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})”忽略有格式错误的 XML 注释 -->
        <member name="M:NetCoreApp.Extensions.ExpressionExtensions.GenerateBody``1(System.Linq.Expressions.ParameterExpression,NetCoreApp.Extensions.Filter)">
            <summary>
            创建linq表达示的body部分
            </summary>
        </member>
        <member name="M:NetCoreApp.Extensions.ExpressionExtensions.GenerateLambda(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)">
            <summary>
            创建完整的lambda
            </summary>
        </member>
        <member name="M:NetCoreApp.Extensions.ExpressionExtensions.Compose``1(System.Linq.Expressions.Expression{``0},System.Linq.Expressions.Expression{``0},System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <summary>
            以特定的条件运行组合两个Expression表达式
            </summary>
            <typeparam name="T">表达式的主实体类型</typeparam>
            <param name="first">第一个Expression表达式</param>
            <param name="second">要组合的Expression表达式</param>
            <param name="merge">组合条件运算方式</param>
            <returns>组合后的表达式</returns>
        </member>
        <member name="M:NetCoreApp.Extensions.ExpressionExtensions.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            以 Expression.AndAlso 组合两个Expression表达式
            </summary>
            <typeparam name="T">表达式的主实体类型</typeparam>
            <param name="first">第一个Expression表达式</param>
            <param name="second">要组合的Expression表达式</param>
            <returns>组合后的表达式</returns>
        </member>
        <member name="M:NetCoreApp.Extensions.ExpressionExtensions.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            以 Expression.OrElse 组合两个Expression表达式
            </summary>
            <typeparam name="T">表达式的主实体类型</typeparam>
            <param name="first">第一个Expression表达式</param>
            <param name="second">要组合的Expression表达式</param>
            <returns>组合后的表达式</returns>
        </member>
        <member name="T:NetCoreApp.Extensions.ExpressionExtensions.ParameterRebinder">
            <summary>
            参数重新绑定
            </summary>
            <seealso cref="T:System.Linq.Expressions.ExpressionVisitor" />
        </member>
        <member name="M:NetCoreApp.Extensions.ExpressionExtensions.ParameterRebinder.#ctor(System.Collections.Generic.Dictionary{System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression})">
            <summary>
            Initializes a new instance of the <see cref="T:NetCoreApp.Extensions.ExpressionExtensions.ParameterRebinder"/> class.
            </summary>
            <param name="map">The map.</param>
        </member>
        <member name="M:NetCoreApp.Extensions.ExpressionExtensions.ParameterRebinder.ReplaceParameters(System.Collections.Generic.Dictionary{System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression)">
            <summary>
            Replaces the parameters.
            </summary>
            <param name="map">The map.</param>
            <param name="exp">The exp.</param>
            <returns></returns>
        </member>
        <member name="M:NetCoreApp.Extensions.ExpressionExtensions.ParameterRebinder.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            访问 <see cref="T:System.Linq.Expressions.ParameterExpression" />。
            </summary>
            <param name="node">要访问的表达式。</param>
            <returns>
            如果修改了该表达式或任何子表达式，则为修改后的表达式；否则返回原始表达式。
            </returns>
        </member>
        <member name="T:NetCoreApp.Extensions.GenericExtension">
            <summary>
            泛型扩展
            </summary>
        </member>
        <member name="M:NetCoreApp.Extensions.GenericExtension.ParseTo``1(System.String)">
            <summary>
                将字符串转换为指定的类型，如果转换不成功，返回默认值。
            </summary>
            <typeparam name="T">结构体类型或枚举类型</typeparam>
            <param name="str">需要转换的字符串</param>
            <returns>返回指定的类型。</returns>
        </member>
        <member name="M:NetCoreApp.Extensions.GenericExtension.ParseTo``1(System.String,``0)">
            <summary>
                将字符串转换为指定的类型，如果转换不成功，返回默认值。
            </summary>
            <typeparam name="T">结构体类型或枚举类型</typeparam>
            <param name="str">需要转换的字符串</param>
            <param name="defaultValue">如果转换失败，需要使用的默认值</param>
            <returns>返回指定的类型。</returns>
        </member>
        <member name="M:NetCoreApp.Extensions.GenericExtension.ParseToNullable``1(System.String)">
            <summary>
                将字符串转换为指定的类型，如果转换不成功，返回null
            </summary>
            <typeparam name="T">结构体类型或枚举类型</typeparam>
            <param name="str">需要转换的字符串</param>
            <returns>返回指定的类型</returns>
        </member>
        <member name="M:NetCoreApp.Extensions.GenericExtension.FastClone``2(``0)">
            <summary>
            快速复制
            </summary>
            <typeparam name="TIn"></typeparam>
            <typeparam name="TOut"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:NetCoreApp.Extensions.GenericExtension.Order(System.Collections.Generic.ICollection{System.String},System.Boolean)">
            <summary>
            对IP地址列表实现排序
            </summary>
            <param name="ips"></param>
            <param name="asc">true为升序，false为降序</param>
            <returns></returns>
        </member>
        <member name="T:NetCoreApp.Extensions.ObjectFastClone`2">
            <summary>
            运用表达式树实现对象的快速复制
            </summary>
            <typeparam name="TIn">目标对象</typeparam>
            <typeparam name="TOut">输出对象</typeparam>
        </member>
        <member name="M:NetCoreApp.Extensions.ObjectExtension.GetPropertyValue``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
                取得对象指定属性的值
            </summary>
            <param name="predicate">要取值的属性</param>
            <returns></returns>
        </member>
        <member name="M:NetCoreApp.Extensions.ObjectExtension.GetPropertyValue``1(``0,System.String)">
            <summary>
                取对象属性值
            </summary>
            <param name="obj"></param>
            <param name="propertyName">支持“.”分隔的多级属性取值。</param>
            <returns></returns>
        </member>
        <member name="M:NetCoreApp.Extensions.ObjectExtension.SetPropertyValue``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object)">
            <summary>
                设置对象指定属性的值
            </summary>
            <param name="predicate">要设置值的属性</param>
            <param name="value">设置值</param>
            <returns>是否设置成功</returns>
        </member>
        <member name="M:NetCoreApp.Extensions.ObjectExtension.SetPropertyValue``1(``0,System.String,System.Object)">
            <summary>
                设置对象属性值
            </summary>
            <param name="obj"></param>
            <param name="propertyName">propertyName1.propertyName2.propertyName3</param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NetCoreApp.Extensions.ObjectExtension.ToDataSet``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
            <summary>
            将集合转换为数据集。
            </summary>
            <typeparam name="T">转换的元素类型。</typeparam>
            <param name="list">集合。</param>
            <param name="generic">是否生成泛型数据集。</param>
            <returns>数据集。</returns>
        </member>
        <member name="M:NetCoreApp.Extensions.ObjectExtension.ToList``1(System.Data.DataTable)">
            <summary>
            DataTable转List
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <!-- 对于成员“M:NetCoreApp.Extensions.ObjectExtension.ChangeType(System.Object,System.Type)”忽略有格式错误的 XML 注释 -->
        <member name="M:NetCoreApp.Extensions.ObjectExtension.ToDataSet(System.Collections.IEnumerable,System.Boolean)">
            <summary>
            将集合转换为数据集。
            </summary>
            <param name="list">集合。</param>
            <param name="generic">是否生成泛型数据集。</param>
            <returns>数据集。</returns>
        </member>
        <member name="M:NetCoreApp.Extensions.ObjectExtension.ToDataSet``1(System.Collections.IEnumerable,System.Boolean)">
            <summary>
            将集合转换为数据集。
            </summary>
            <typeparam name="T">转换的元素类型。</typeparam>
            <param name="list">集合。</param>
            <param name="generic">是否生成泛型数据集。</param>
            <returns>数据集。</returns>
        </member>
        <member name="M:NetCoreApp.Extensions.ObjectExtension.ToListSet``1(``0,System.Boolean)">
            <summary>
            将实例转换为集合数据集。
            </summary>
            <typeparam name="T">实例类型。</typeparam>
            <param name="o">实例。</param>
            <param name="generic">是否生成泛型数据集。</param>
            <returns>数据集。</returns>
        </member>
        <member name="M:NetCoreApp.Extensions.ObjectExtension.ToXmlDocument``1(``0)">
            <summary>
            将可序列化实例转换为XmlDocument。
            </summary>
            <typeparam name="T">实例类型。</typeparam>
            <param name="o">实例。</param>
            <returns>XmlDocument。</returns>
        </member>
        <member name="M:NetCoreApp.Extensions.ObjectExtension.ListToDataSet(System.Collections.IEnumerable,System.Type,System.Boolean)">
            <summary>
            将集合转换为数据集。
            </summary>
            <param name="list">集合。</param>
            <param name="t">转换的元素类型。</param>
            <param name="generic">是否生成泛型数据集。</param>
            <returns>转换后的数据集。</returns>
        </member>
        <member name="M:NetCoreApp.Extensions.ObjectExtension.ListToDataSet``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
            <summary>
            将集合转换为数据集。
            </summary>
            <typeparam name="T">转换的元素类型。</typeparam>
            <param name="list">集合。</param>
            <param name="generic">是否生成泛型数据集。</param>
            <returns>数据集。</returns>
        </member>
        <member name="M:NetCoreApp.Extensions.ObjectExtension.ListToDataSet(System.Collections.IEnumerable,System.Boolean)">
            <summary>
            将集合转换为数据集。
            </summary>
            <param name="list">集合。</param>
            <param name="generic">是否转换为字符串形式。</param>
            <returns>转换后的数据集。</returns>
        </member>
        <member name="M:NetCoreApp.Extensions.ObjectExtension.GetData(System.Data.DataSet)">
            <summary>
            获取DataSet第一表，第一行，第一列的值。
            </summary>
            <param name="ds">DataSet数据集。</param>
            <returns>值。</returns>
        </member>
        <member name="M:NetCoreApp.Extensions.ObjectExtension.GetData(System.Data.DataTable)">
            <summary>
            获取DataTable第一行，第一列的值。
            </summary>
            <param name="dt">DataTable数据集表。</param>
            <returns>值。</returns>
        </member>
        <member name="M:NetCoreApp.Extensions.ObjectExtension.GetData(System.Data.DataSet,System.String)">
            <summary>
            获取DataSet第一个匹配columnName的值。
            </summary>
            <param name="ds">数据集。</param>
            <param name="columnName">列名。</param>
            <returns>值。</returns>
        </member>
        <member name="M:NetCoreApp.Extensions.ObjectExtension.GetData(System.Data.DataTable,System.String)">
            <summary>
            获取DataTable第一个匹配columnName的值。
            </summary>
            <param name="dt">数据表。</param>
            <param name="columnName">列名。</param>
            <returns>值。</returns>
        </member>
        <member name="M:NetCoreApp.Extensions.ObjectExtension.ToString(System.Object,System.String)">
            <summary>
            将object转换为string类型信息。
            </summary>
            <param name="o">object。</param>
            <param name="t">默认值。</param>
            <returns>string。</returns>
        </member>
        <member name="M:NetCoreApp.Extensions.ObjectExtension.ToString(System.Nullable{System.DateTime},System.String,System.String)">
            <summary>
            将DateTime?转换为string类型信息。
            </summary>
            <param name="o">DateTime?。</param>
            <param name="format">标准或自定义日期和时间格式的字符串。</param>
            <param name="t">默认值。</param>
            <returns>string。</returns>
        </member>
        <member name="M:NetCoreApp.Extensions.ObjectExtension.ToString(System.Nullable{System.TimeSpan},System.String,System.String)">
            <summary>
            将TimeSpan?转换为string类型信息。
            </summary>
            <param name="o">TimeSpan?。</param>
            <param name="format">标准或自定义时间格式的字符串。</param>
            <param name="t">默认值。</param>
            <returns>string。</returns>
        </member>
        <member name="M:NetCoreApp.Extensions.ObjectExtension.ToSubString(System.Object,System.Int32,System.Int32,System.String)">
            <summary>
            将object转换为截取后的string类型信息。
            </summary>
            <param name="o">object。</param>
            <param name="startIndex">此实例中子字符串的起始字符位置（从零开始）。</param>
            <param name="length">子字符串中的字符数。</param>
            <param name="suffix">后缀。如果没有截取则不添加。</param>
            <returns>截取后的string类型信息。</returns>
        </member>
        <member name="M:NetCoreApp.Extensions.ObjectExtension.ToByte(System.Object,System.Byte)">
            <summary>
            将object转换为byte类型信息。
            </summary>
            <param name="o">object。</param>
            <param name="t">默认值。</param>
            <returns>byte。</returns>
        </member>
        <member name="M:NetCoreApp.Extensions.ObjectExtension.ToChar(System.Object,System.Char)">
            <summary>
            将object转换为char类型信息。
            </summary>
            <param name="o">object。</param>
            <param name="t">默认值。</param>
            <returns>char。</returns>
        </member>
        <member name="M:NetCoreApp.Extensions.ObjectExtension.ToInt(System.Object,System.Int32)">
            <summary>
            将object转换为int类型信息。
            </summary>
            <param name="o">object。</param>
            <param name="t">默认值。</param>
            <returns>int。</returns>
        </member>
        <member name="M:NetCoreApp.Extensions.ObjectExtension.ToDouble(System.Object,System.Double)">
            <summary>
            将object转换为double类型信息。
            </summary>
            <param name="o">object。</param>
            <param name="t">默认值。</param>
            <returns>double。</returns>
        </member>
        <member name="M:NetCoreApp.Extensions.ObjectExtension.ToDecimal(System.Object,System.Decimal)">
            <summary>
            将object转换为decimal类型信息。
            </summary>
            <param name="o">object。</param>
            <param name="t">默认值。</param>
            <returns>decimal。</returns>
        </member>
        <member name="M:NetCoreApp.Extensions.ObjectExtension.ToFloat(System.Object,System.Single)">
            <summary>
            将object转换为float类型信息。
            </summary>
            <param name="o">object。</param>
            <param name="t">默认值。</param>
            <returns>float。</returns>
        </member>
        <member name="M:NetCoreApp.Extensions.ObjectExtension.ToLong(System.Object,System.Int64)">
            <summary>
            将object转换为long类型信息。
            </summary>
            <param name="o">object。</param>
            <param name="t">默认值。</param>
            <returns>long。</returns>
        </member>
        <member name="M:NetCoreApp.Extensions.ObjectExtension.ToBool(System.Object,System.Boolean)">
            <summary>
            将object转换为bool类型信息。
            </summary>
            <param name="o">object。</param>
            <param name="t">默认值。</param>
            <returns>bool。</returns>
        </member>
        <member name="M:NetCoreApp.Extensions.ObjectExtension.ToSbyte(System.Object,System.SByte)">
            <summary>
            将object转换为sbyte类型信息。
            </summary>
            <param name="o">object。</param>
            <param name="t">默认值。</param>
            <returns>sbyte。</returns>
        </member>
        <member name="M:NetCoreApp.Extensions.ObjectExtension.ToShort(System.Object,System.Int16)">
            <summary>
            将object转换为short类型信息。
            </summary>
            <param name="o">object。</param>
            <param name="t">默认值。</param>
            <returns>short。</returns>
        </member>
        <member name="M:NetCoreApp.Extensions.ObjectExtension.ToUShort(System.Object,System.UInt16)">
            <summary>
            将object转换为ushort类型信息。
            </summary>
            <param name="o">object。</param>
            <param name="t">默认值。</param>
            <returns>ushort。</returns>
        </member>
        <member name="M:NetCoreApp.Extensions.ObjectExtension.ToULong(System.Object,System.UInt64)">
            <summary>
            将object转换为ulong类型信息。
            </summary>
            <param name="o">object。</param>
            <param name="t">默认值。</param>
            <returns>ulong。</returns>
        </member>
        <member name="M:NetCoreApp.Extensions.ObjectExtension.ToEnum``1(System.Object,``0)">
            <summary>
            将object转换为Enum[T]类型信息。
            </summary>
            <param name="o">object。</param>
            <param name="t">默认值。</param>
            <returns>Enum[T]。</returns>
        </member>
        <member name="M:NetCoreApp.Extensions.ObjectExtension.ToDateTime(System.Object,System.DateTime)">
            <summary>
            将object转换为DateTime类型信息。
            </summary>
            <param name="o">object。</param>
            <param name="t">默认值。</param>
            <returns>DateTime。</returns>
        </member>
        <member name="M:NetCoreApp.Extensions.ObjectExtension.ToTimeSpan(System.Object,System.TimeSpan)">
            <summary>
            将object转换为TimeSpan类型信息。
            </summary>
            <param name="o">object。</param>
            <param name="t">默认值。</param>
            <returns>TimeSpan。</returns>
        </member>
        <member name="M:NetCoreApp.Extensions.ObjectExtension.ToGuid(System.Object,System.Guid)">
            <summary>
            将object转换为Guid类型信息。
            </summary>
            <param name="o">object。</param>
            <param name="t">默认值。</param>
            <returns>Guid。</returns>
        </member>
        <member name="M:NetCoreApp.Extensions.ObjectExtension.GetBool(System.Object)">
            <summary>
            从object中获取bool类型信息。
            </summary>
            <param name="o">object。</param>
            <returns>bool。</returns>
        </member>
        <member name="M:NetCoreApp.Extensions.ObjectExtension.GetInt(System.Object)">
            <summary>
            从object中获取int类型信息。
            </summary>
            <param name="o">object。</param>
            <returns>int。</returns>
        </member>
        <member name="M:NetCoreApp.Extensions.ObjectExtension.GetDecimal(System.Object)">
            <summary>
            从object中获取decimal类型信息。
            </summary>
            <param name="o">object。</param>
            <returns>decimal。</returns>
        </member>
        <member name="M:NetCoreApp.Extensions.ObjectExtension.GetDouble(System.Object)">
            <summary>
            从object中获取double类型信息。
            </summary>
            <param name="o">object。</param>
            <returns>double。</returns>
        </member>
        <member name="M:NetCoreApp.Extensions.ObjectExtension.GetPositiveNumber(System.Object)">
            <summary>
            从object中获取正数信息。
            </summary>
            <param name="o">object。</param>
            <returns>decimal。</returns>
        </member>
        <member name="M:NetCoreApp.Extensions.ObjectExtension.GetDateTime(System.Object)">
            <summary>
            从object中获取DateTime?类型信息。
            </summary>
            <param name="o">object。</param>
            <returns>DateTime?。</returns>
        </member>
        <member name="M:NetCoreApp.Extensions.ObjectExtension.GetTimeSpan(System.Object)">
            <summary>
            从object中获取TimeSpan?类型信息。
            </summary>
            <param name="o">object。</param>
            <returns>TimeSpan?。</returns>
        </member>
        <member name="M:NetCoreApp.Extensions.ObjectExtension.GetGuid(System.Object)">
            <summary>
            从object中获取Guid?类型信息。
            </summary>
            <param name="o">object。</param>
            <returns>Guid?。</returns>
        </member>
        <member name="M:NetCoreApp.Extensions.ObjectExtension.GetSqlDateTime(System.Object,System.DateTime)">
            <summary>
            将object转换为SqlServer中的DateTime?类型信息。
            </summary>
            <param name="o">object。</param>
            <param name="t">默认值。</param>
            <returns>DateTime?。</returns>
        </member>
        <member name="M:NetCoreApp.Extensions.ObjectExtension.Value(System.Xml.Linq.XElement,System.String)">
            <summary>
            读取XElement节点的文本内容。
            </summary>
            <param name="xElement">XElement节点。</param>
            <param name="t">默认值。</param>
            <returns>文本内容。</returns>
        </member>
        <member name="M:NetCoreApp.Extensions.ObjectExtension.GetValue``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            获取与指定键相关的值。
            </summary>
            <typeparam name="TKey">键类型。</typeparam>
            <typeparam name="TValue">值类型。</typeparam>
            <param name="dictionary">表示键/值对象的泛型集合。</param>
            <param name="key">键。</param>
            <param name="t">默认值。</param>
            <returns>值。</returns>
        </member>
        <member name="M:NetCoreApp.Extensions.ObjectExtension.GetFirstOrDefaultValue``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            获取与指定键相关或者第一个的值。
            </summary>
            <typeparam name="TKey">键类型。</typeparam>
            <typeparam name="TValue">值类型。</typeparam>
            <param name="dictionary">表示键/值对象的泛型集合。</param>
            <param name="key">键。</param>
            <param name="t">默认值。</param>
            <returns>值。</returns>
        </member>
        <member name="M:NetCoreApp.Extensions.ObjectExtension.Element(System.Xml.Linq.XContainer,System.Xml.Linq.XName,System.Boolean)">
            <summary>
            获取具有指定 System.Xml.Linq.XName 的第一个（按文档顺序）子元素。
            </summary>
            <param name="xContainer">XContainer。</param>
            <param name="xName">要匹配的 System.Xml.Linq.XName。</param>
            <param name="t">是否返回同名默认值。</param>
            <returns>与指定 System.Xml.Linq.XName 匹配的 System.Xml.Linq.XElement，或者为 null。</returns>
        </member>
        <member name="M:NetCoreApp.Extensions.ObjectExtension.Elements(System.Xml.Linq.XContainer,System.Boolean)">
            <summary>
            按文档顺序返回此元素或文档的子元素集合。
            </summary>
            <param name="xContainer">XContainer。</param>
            <param name="t">是否返回非空默认值。</param>
            <returns>System.Xml.Linq.XElement 的按文档顺序包含此System.Xml.Linq.XContainer 的子元素，或者非空默认值。</returns>
        </member>
        <member name="M:NetCoreApp.Extensions.ObjectExtension.Elements(System.Xml.Linq.XContainer,System.Xml.Linq.XName,System.Boolean)">
            <summary>
            按文档顺序返回此元素或文档的经过筛选的子元素集合。集合中只包括具有匹配 System.Xml.Linq.XName 的元素。
            </summary>
            <param name="xContainer">XContainer。</param>
            <param name="xName">要匹配的 System.Xml.Linq.XName。</param>
            <param name="t">是否返回非空默认值。</param>
            <returns>System.Xml.Linq.XElement 的按文档顺序包含具有匹配System.Xml.Linq.XName 的 System.Xml.Linq.XContainer 的子级，或者非空默认值。</returns>
        </member>
        <member name="M:NetCoreApp.Extensions.ObjectExtension.RemoveHTMLTags(System.String)">
            <summary>
            删除html标签。
            </summary>
            <param name="html">输入的字符串。</param>
            <returns>没有html标签的字符串。</returns>
        </member>
        <member name="M:NetCoreApp.Extensions.ObjectExtension.ToFileName(System.String)">
            <summary>
            字符串转换为文件名。
            </summary>
            <param name="s">字符串。</param>
            <returns>文件名。</returns>
        </member>
        <member name="M:NetCoreApp.Extensions.ObjectExtension.GetMonday(System.DateTime)">
            <summary>
            获取星期一的日期。
            </summary>
            <param name="dateTime">日期。</param>
            <returns>星期一的日期。</returns>
        </member>
        <member name="M:NetCoreApp.Extensions.ObjectExtension.DefaultStringIfEmpty(System.String,System.String[])">
            <summary>
            获取默认非空字符串。
            </summary>
            <param name="s">首选默认非空字符串。</param>
            <param name="args">依次非空字符串可选项。</param>
            <returns>默认非空字符串。若无可选项则返回string.Empty。</returns>
        </member>
        <member name="M:NetCoreApp.Extensions.ObjectExtension.ToUrlEncodeString(System.String,System.Text.RegularExpressions.Regex,System.Text.Encoding)">
            <summary>
            对 URL 字符串进行编码。
            </summary>
            <param name="s">要编码的文本。</param>
            <param name="regex">匹配要编码的文本。</param>
            <param name="encoding">指定编码方案的 System.Text.Encoding 对象。</param>
            <returns>一个已编码的字符串。</returns>
        </member>
        <member name="M:NetCoreApp.Extensions.ObjectExtension.ToUrlEncodeString(System.String,System.String,System.Text.Encoding)">
            <summary>
            对 URL 字符串进行编码。
            </summary>
            <param name="s">要编码的文本。</param>
            <param name="regex">匹配要编码的文本。</param>
            <param name="encoding">指定编码方案的 System.Text.Encoding 对象。</param>
            <returns>一个已编码的字符串。</returns>
        </member>
        <member name="M:NetCoreApp.Extensions.ObjectExtension.ToUnixTimeStamp(System.DateTime)">
            <summary>
            将日期转换为UNIX时间戳字符串
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:NetCoreApp.Extensions.ObjectExtension.IsMobile(System.String)">
            <summary>
            判断当前字符串是否是移动电话号码
            </summary>
            <param name="mobile"></param>
            <returns></returns>
        </member>
        <member name="M:NetCoreApp.Extensions.ObjectExtension.IsEmail(System.String)">
            <summary>
            判断当前字符串是否为邮箱
            </summary>
            <param name="email"></param>
            <returns></returns>
        </member>
        <member name="M:NetCoreApp.Extensions.StringExtensions.ReplaceWhitespace(System.String,System.String)">
            <summary>
                替换空格字符
            </summary>
            <param name="input"></param>
            <param name="replacement">替换为该字符</param>
            <returns>替换后的字符串</returns>
        </member>
        <member name="M:NetCoreApp.Extensions.StringExtensions.Contains(System.String,System.String,System.StringComparison)">
            <summary>
                返回一个值，该值指示指定的 String 对象是否出现在此字符串中。
            </summary>
            <param name="source"></param>
            <param name="value">要搜寻的字符串。</param>
            <param name="comparisonType">指定搜索规则的枚举值之一。</param>
            <returns>如果 value 参数出现在此字符串中则为 true；否则为 false。</returns>
        </member>
        <member name="M:NetCoreApp.Extensions.StringExtensions.StripHtml(System.String,System.Int32)">
            <summary>
                清除 Html 代码，并返回指定长度的文本。(连续空行或空格会被替换为一个)
            </summary>
            <param name="text"></param>
            <param name="maxLength">返回的文本长度（为0返回所有文本）</param>
            <returns></returns>
        </member>
        <member name="T:NetCoreApp.Extensions.TypeExtension">
            <summary>
            Type类的扩展方法
            </summary>
        </member>
        <member name="M:NetCoreApp.Extensions.TypeExtension.IsBulitinType(System.Type)">
            <summary>
            判断是否为基础类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="P:NetCoreApp.Model.PaginationResult.total">
            <summary>
            总条数
            </summary>
        </member>
        <member name="P:NetCoreApp.Model.PaginationResult.pageSize">
            <summary>
            每页条数
            </summary>
        </member>
        <member name="P:NetCoreApp.Model.PaginationResult.pageIndex">
            <summary>
            当前页码
            </summary>
        </member>
        <member name="P:NetCoreApp.Model.PaginationResult.pageCount">
            <summary>
            总页数
            </summary>
        </member>
        <member name="P:NetCoreApp.Options.DbContextOption.ConnectionString">
            <summary>
            数据库连接字符串
            </summary>
        </member>
        <member name="P:NetCoreApp.Options.DbContextOption.ModelAssemblyName">
            <summary>
            实体程序集名称
            </summary>
        </member>
        <member name="M:NetCoreApp.Utils.CommonHelper.NewMongodbId">
            <summary>
            生成类似Mongodb的ObjectId有序、不重复Guid
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetCoreApp.Utils.CommonHelper.GetDateDiff(System.DateTime)">
            <summary>
            获取日期差
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:NetCoreApp.Utils.CommonHelper.GetTypeByString(System.String)">
            <summary>
            获得类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
    </members>
</doc>
